Practice questions for [[COMP 302]].

# Writing SML code

## Lists and ListPairs

### Rewriting standard library functions

#### Append

Write a function `app` that takes in a tuple of two lists (`list * list`) and returns one list that has the elements in both lists, in order. You can't use any of the built-in list functions (except `List.rev`) or the `@` operator, obviously. `::` is allowed.

```ocaml
fun app ([], other) = other
  | app (h::t, other) = h::(app (t, other))
```

Now, write a tail-recursive function `app_tl` that takes in a tuple of three lists (`list * list * list`), with the last list being the accumulator, and appends the first two lists together.

```ocaml
fun app_tl ([], other, acc) = (case other of [] => List.rev acc | h::t => app_tl ([], t, h::acc))
  | app_tl (h::t, other, acc) = app_tl (t, other, h::acc)
```

Now, write a function `app_cont` that uses continuations.

```ocaml
fun app_cont ([], other, cont) = cont other
  | app_cont (h::t, other, cont) = app_cont (t, other, fn x => cont (h::x)))
```

#### Reverse

Write a function `rev` that takes in a list and returns that list, reversed.

```ocaml
fun rev [] = []
  | rev (h::t) = (rev t) @ [h]
```

Write a function `rev_tl` that does the same as the above but is tail-recursive. It should take in a tuple of type `list * list`.

```ocaml
fun rev_tl ([], acc) = acc
  | rev_tl (h::t, acc) = rev_tl(t, h::acc)
```

*   A unix session is the period after user authentication and before the user logs out in which the user is allowed to create processes and kill them inside the same session. It is essentially a group of process.
*   A shell is an environment which allows the user to interact with the system. It is used to allow the user to run processes and use system resources. It is invoked upon the creation of a session.

The internet is an array of layers which work together to help a message (packet/datagram) reach
 